name: Terraform Deploy

# Trigger the workflow on push to the main branch
on:
  push:
    branches: [ main ]

# Special permissions required for OIDC authentication during Azure login
permissions:
  id-token: write    # Permission to request an ID token for OIDC authentication
  contents: read     # Permission to read repository contents
  pull-requests: write  # Permission to create and manage pull requests

# Environment variables for Terraform Azure Provider to set up OIDC authentication
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID_RW }}"  # Azure Client ID with necessary permissions
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"  # Azure Subscription ID
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"  # Azure Tenant ID
  ARM_ACCESS_KEY: "${{ secrets.ARM_ACCESS_KEY }}"  # Azure Access Key for authentication

defaults:
  run:
    working-directory: ./infra/tf-app  # Set the working directory for Terraform commands

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    
    # Ensure the job only runs when:
    # - The branch is 'main'
    # - The Terraform plan has changes and the PR has been approved/merged
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    
    runs-on: ubuntu-latest  # The job will run on the latest Ubuntu runner
    environment: prod  # Define the environment for the job

    steps:
    # Step 1: Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4  # Use the latest GitHub Actions checkout action

    # Step 2: Set up the latest version of Terraform CLI on the runner
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3  # Setup the Terraform CLI

    # Step 3: Initialize Terraform configuration in the working directory
    - name: Terraform Init
      run: terraform init  # Initialize Terraform configuration, modules, and state

    # Step 4: Download the previously saved Terraform plan artifact from GitHub Actions
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4  # Download the artifact containing the Terraform plan
      with:
        name: tfplan  # Specify the name of the artifact to download

    # Step 5: Apply the Terraform plan to make changes to the infrastructure
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan  # Apply the Terraform plan automatically without confirmation
